% Script TowerRunAnalysis.m
%
% Identify and anlyse data files generated by the M4 tower at the NWTC in
% the last 24 hours.
%
% Written by Andy Clifton, July 2011.
% Date -- Modification
% 11/4/2011 -- 1. added better switch to enable DEBUG
%           -- 2. 'Today' includes the last 27 hours of data

function [from_date,to_date,data_root] = TowerRunAnalysis(varargin)

close all
fclose('all');

%% get some information about the expected inputs
expectedInputs = {'data_root',...
    'from_date',...
    'to_date',...
    'config_path',...
    'config_file',...
    'log_path',...
    'log_file',...
    'outage_path',...
    'outage_file',...
    'calibration_path',...
    'calibration_file',...
    'web_path',...
    'DO_MOVE'};

%% check the input data
for k = 1:2:size(varargin,2)
    fprintf(1,'... received input argument for %s ...\n', char(varargin{k}));
    if isdeployed
        switch varargin{k}
            case {'from_date';'to_date';'DO_MOVE'}
                eval([char(varargin{k}) '= str2num(varargin{' num2str(k+1) '});']);
            otherwise
                eval([char(varargin{k}) '= varargin{' num2str(k+1) '};']);
        end
    else
       if isnumeric(varargin{k+1})
            eval([char(varargin{k}) '= varargin{' num2str(k+1) '};']);
        elseif ischar(varargin{k+1})
            eval([char(varargin{k}) '=''' char(varargin{k+1}) ''';']);
        end
    end
end

%% SWITCHES
if ~exist('DEBUG','var')
    DEBUG = 0;
end

%% hostname
hostname = SubGetHostname;

%% open the log file
[LogFID,LogFMsg] = fopen(fullfile(log_path,log_file),'w');
if LogFID < 0
    disp(LogFMsg);
    warning('TowerRunAnalysis:Run',...
        'Problem running TowerRunAnalysis.m')
else
    fprintf(LogFID,'\n******\nTowerRunAnalysis.m\n******\n');
    fprintf(LogFID,'Running on host %s.\n', hostname);
    fprintf(LogFID,'Log file opened at %s local\n',datestr(now,'HH:MM yyyy-mmmm-dd'));
    fprintf(LogFID,'\n**********\n');
end

%% Write out inputs
fprintf(LogFID,'Input arguments:');
for i = 1:numel(expectedInputs)
    fprintf(LogFID,'\n %i: %s is ', i, expectedInputs{i});
    switch expectedInputs{i}
        case {'from_date';'to_date'}
            fprintf(LogFID,'%s.',datestr(eval(expectedInputs{i}),'dd mmmm yyyy HH:MM'));
        case {'DO_MOVE'}
            fprintf(LogFID,'%d.',eval(expectedInputs{i}));
        otherwise
            fprintf(LogFID,'%s.',eval(expectedInputs{i}));
    end
end
fprintf(LogFID,'\n**********\n');
fprintf(LogFID,'Running code.\n');


%% load the configuration file
fprintf(LogFID,'* Loading configuration\n');
config = load(fullfile(config_path,config_file));

%% find the files to read in
fprintf(LogFID,'* Looking for data files from %s to %s in %s ...',...
    datestr(datenum(from_date),'dd mmmm yyyy HH:MM'),...
    datestr(datenum(to_date),'dd mmmm yyyy HH:MM'),...
    data_root);
[process_path,process_file] = SubTowerMakeFilelist(data_root,...
    from_date,to_date,...
    config.tower.processing.datafile.extension,...
    config.tower.processing.datafile.dateFormatStr,...
    LogFID);
fprintf(LogFID,' found %i files.\n', numel(process_file));

%% now run
for p = 1:numel(process_path)
    % check to see if we have a 'signals' directory in this data path
    if isdir(fullfile(process_path{p},'signals'))
        if isempty(dir(fullfile(process_path{p},'signals','*.png')))
            % then no signals yet
            DEBUG = 1;
        else
            % then we already looked at the signals once for this day
            DEBUG = 0;
        end
    else
        DEBUG = 1;
    end
    
    try
        % figure out files
        fprintf(LogFID,'\nFile %i of % i.\n', p, numel(process_path));
        fprintf(1,'\nFile %i of % i.\n', p, numel(process_path));
        % work out where to put the files
        output_path = fullfile(process_path{p},'summary_data');
        % convert the file name to our standard format
        data_file_base = strrep(process_file{p},config.tower.processing.datafile.extension,'');
        data_file_base_datenum = TowerConvertDatafilenameDatenum(data_file_base,...
            config.tower.processing.datafile.dateFormatStr);
        output_file_base = datestr(data_file_base_datenum,'mm_dd_yyyy_HH_MM_SS_FFF');
        output_file_data = [output_file_base '.mat'];
        uptodate = -1;
        try
            % do the QC
            uptodate = FirstLook(fullfile(process_path{p}),process_file{p},...
                output_path,output_file_base,...
                LogFID,...
                'DEBUG',DEBUG,...
                'outage_path',outage_path,...
                'outage_file',outage_file,...
                'config_path',config_path,...
                'config_file',config_file,...
                'calibration_path',calibration_path,...
                'calibration_file',calibration_file);
        catch
            error('tower_main:Run',...
                'Problem running FirstLook.m')
        end
        
        if (uptodate == 0) && DO_MOVE
            try
                % then we have created new graphics;
                % copy image files to the log directory
                fofile1 = fullfile(process_path{p},'summary_data',...
                    [output_file_base '_status.png']);
                fofile2 = fullfile(process_path{p},'summary_data',...
                    [output_file_base '_profiles.png']);
                % copy to private
                try
                    copyfile(fofile1,fullfile(log_path,[tower '_status.png']))
                end
                try
                    copyfile(fofile2,fullfile(log_path,[tower '_profiles.png']))
                end
                % copy to web
                if ~isempty(web_path)
                    try
                        copyfile(fofile1,fullfile(web_path,[tower '_status.png']))
                    end
                    try
                        copyfile(fofile2,fullfile(web_path,[tower '_profiles.png']))
                    end
                    try
                        % need some files that give details of the last update and last
                        % file that were looked
                        % last file read
                        [LastFileFID,LastFMsg] = fopen(fullfile(web_path,...
                            [tower '_LastFileDateTime.html']),'w');
                        fprintf(LastFileFID,'%s UTC on %s',...
                            datestr(TowerConvertDatafilenameDatenum(process_file{p},...
                            config.tower.processing.datafile.dateFormatStr),...
                            'HH:MM'),...
                            datestr(TowerConvertDatafilenameDatenum(process_file{p},...
                            config.tower.processing.datafile.dateFormatStr),...
                            'mmm dd, yyyy'));
                        fclose(LastFileFID);
                    catch
                        warning('tower_main:LastFileProcessed',...
                            'Problem creating %s',...
                            fullfile(web_path,...
                            [tower '_LastFileDateTime.html']))
                    end
                    % last update time
                    [LastUpdateFID,LastFMsg] = fopen(fullfile(web_path,...
                        [tower '_LastUpdateDateTime.html']),'w');
                    fprintf(LastUpdateFID,'%s local time on %s',...
                        datestr(now,'HH:MM'),...
                        datestr(now,'mmmm dd, yyyy'));
                    fclose(LastUpdateFID);
                end
            catch
                warning('tower_main:CopyFigures',...
                    'Problem copying figures to %s.',log_path)
            end
        end
    catch
        [warnmsg, msgid] = lastwarn;
        fprintf(LogFID,'Warning: %s generated by %s.\n', warnmsg, msgid);
        fprintf(1,'Warning: %s generated by %s.\n', warnmsg, msgid);
        [errmsg, msgid] = lasterr;
        fprintf(LogFID,'Error: %s generated by %s.\n', errmsg, msgid);
        fprintf(1,'Error: %s generated by %s.\n', errmsg, msgid);
    end
end



%% close the log file
fprintf(LogFID,'\n**********\n');
fprintf(LogFID,'Log file closed at %s local.\n',datestr(now,'HH:MM yyyy-mmmm-dd'));
fclose(LogFID);



