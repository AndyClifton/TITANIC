% Script tower_main.m
%
% Identify and anlyse data files generated by the M4 tower at the NWTC in
% the last 24 hours.
%
% Written by Andy Clifton, July 2011.
% Date -- Modification
% 11/4/2011 -- 1. added better switch to enable DEBUG
%           -- 2. 'Today' includes the last 27 hours of data

close all
fclose('all');

if ~exist('from_date','var')
    from_date = datevec(SubNowUTC(-7)-1);
end
if ~exist('to_date','var')
    to_date = datevec(SubNowUTC(-7));
end

if ~exist('tower','var')
    tower = 'M4';
    towerdata_path_default = 'M4Twr';
    outage_file_default = 'M4_outages.mat';
    config_file_default = 'M4_config.mat';
else
    switch tower
        case 'M4'
            towerdata_path_default = 'M4Twr';
            outage_file_default = 'M4_outages.mat';
            config_file_default = 'M4_config.mat';
        case 'M5'
            towerdata_path_default = 'M5Twr';
            outage_file_default = 'M5_outages.mat';
            config_file_default = 'M5_config.mat';
    end
end

if ~exist('data_path','var')
    % data path
    if ispc
        data_root_default = ['Y:\Wind\Confidential\Projects\MetData\' towerdata_path_default '\'];
        data_path_default = [data_root_default datestr(datenum(from_date),'yyyy\\mm')];
    elseif ismac
        data_root_default = ['/Volumes/Confidential/Projects/MetData/' towerdata_path_default '/'];
        data_path_default = [data_root_default datestr(datenum(from_date),'yyyy/mm')];
    end
    data_root = data_root_default;
    data_path = data_path_default;
end

% hostname
hostname = SubGetHostname;

% log file name
if ~exist('log_file','var')
    if isdeployed
        log_file_default = [tower '_log_operational_' strrep(hostname,'.','_') '.txt'];
    else
        log_file_default = [tower '_log_interactive_' strrep(hostname,'.','_') '.txt'];
    end
    log_file = log_file_default;
end

% log path name
if ~exist('log_path','var')
    if ispc
        log_path_default = ['Y:\Wind\Confidential\Projects\MetData\' towerdata_path_default '\QCReports'];
    elseif ismac
        log_path_default = ['/Volumes/Confidential/Projects/MetData/' towerdata_path_default '/QCReports'];
    end
    log_path = log_path_default;
end

% outage file name
if ~exist('outage_file','var')
    outage_file = outage_file_default;
end

% outage path
if ~exist('outage_path','var')
    if ispc
        outage_path_default = 'Y:\wind\public\Projects\Projects G-S\Met135Analysis\firstlook';
    elseif ismac
        outage_path_default = '/Volumes/Public/Projects/Projects G-S/Met135Analysis/firstlook';
    end
    outage_path = outage_path_default;
end

% config file name
if ~exist('config_file','var')
    config_file = config_file_default;
end

% configuration path
if ~exist('config_path','var')
    if ispc
        config_path_default = 'Y:\wind\public\Projects\Projects G-S\Met135Analysis\firstlook';
    elseif ismac
        config_path_default = '/Volumes/Public/Projects/Projects G-S/Met135Analysis/firstlook';
    end
    config_path = config_path_default;
end

%% Web page

% log path name
if ~exist('web_path','var')
    if ispc
        web_path_default = ['Y:\Wind\WindWeb\MetData\' towerdata_path_default ''];
    elseif ismac
        web_path_default = ['/Volumes/WindWeb/MetData/' towerdata_path_default ''];
    end
    web_path = web_path_default;
end

%% SWITCHES
if ~exist('DEBUG','var')
    DEBUG = 0;
end

%% find today's files; implement a switch to do this, as every tower is
%% going to be different (sigh)
switch tower
    case {'M4','M5'}
        [process_path,process_file] = SubTowerMakeFilelist(data_path,from_date,to_date);
        disp(['Found ' num2str(numel(process_file)) ' files;'])
    case 'Fluela'
        [process_path,process_file] = Fluela_make_file_list(data_path,from_date,to_date);
        disp(['Found ' num2str(numel(process_file)) ' files;'])
end

%% open the log file
[LogFID,LogFMsg] = fopen(fullfile(log_path,log_file),'w');
if LogFID < 0
    disp(LogFMsg);
    warning('tower_main:Run',...
        'Problem running tower_doQC.m')
else
    fprintf(LogFID,'Running on host %s.\n', hostname);
    fprintf(LogFID,'Log file opened at %s local\n\n',datestr(now,'HH:MM yyyy-mmmm-dd'));
    fprintf(LogFID,'Configuration file = %s/%s\n',config_path,config_file);
    fprintf(LogFID,'Outage file = %s/%s\n',outage_path,outage_file);
    fprintf(LogFID,'Data Path = %s\n',data_path);
    fprintf(LogFID,'From date = %s UTC\n',datestr(from_date,'yyyy-mmmm-dd HH:MM'));
    fprintf(LogFID,'To date = %s UTC\n',datestr(to_date,'yyyy-mmmm-dd HH:MM'));
    fprintf(LogFID,'\n**********\n');
end

%% now run
for p = 1:numel(process_path)
    % check to see if we have a 'signals' directory in this data path
    if isdir(fullfile(data_path,process_path{p},'signals'))
        if isempty(dir(fullfile(data_path,process_path{p},'signals','*.png')))
            % then no signals yet
            DEBUG = 1;
        else
            % then we already looked at the signals once for this day
            DEBUG = 0;
        end
    else
        DEBUG = 1;
    end
    
    try
        % figure out files
        fprintf(LogFID,'\nFile %i of % i.\n', p, numel(process_path));
        fprintf(1,'\nFile %i of % i.\n', p, numel(process_path));
        output_path = fullfile(data_path,process_path{p},'summary_data');
        switch tower
            case {'M4';'M5'}
                output_file = strrep(process_file{p},'.dat','.mat');
            case 'Fluela'
                output_file = [process_file{p} '.mat'];
        end
        uptodate = -1;
        try
            % do the QC
            uptodate = FirstLook(fullfile(data_path,process_path{p}),process_file{p},...
                output_path,output_file,...
                LogFID,...
                outage_path,outage_file,...
                config_path,config_file,...
                DEBUG);
        catch
            error('tower_main:Run',...
                'Problem running tower_doQC.m')
        end
        
        if (uptodate == 0) && DO_MOVE
            try
                % then we have created new graphics;
                % copy image files to the log directory
                fofile1 = fullfile(data_path,process_path{p},'summary_data',...
                    [strrep(process_file{p},'.dat','') '_status.png']);
                fofile2 = fullfile(data_path,process_path{p},'summary_data',...
                    [strrep(process_file{p},'.dat','') '_profiles.png']);
                % copy to private
                try
                    copyfile(fofile1,fullfile(log_path,[tower '_status.png']))
                end
                try
                    copyfile(fofile2,fullfile(log_path,[tower '_profiles.png']))
                end
                % copy to web
                if ~isempty(web_path)
                    try
                        copyfile(fofile1,fullfile(web_path,[tower '_status.png']))
                    end
                    try
                        copyfile(fofile2,fullfile(web_path,[tower '_profiles.png']))
                    end
                    % need some files that give details of the last update and last
                    % file that were looked
                    % last file read
                    [LastFileFID,LastFMsg] = fopen(fullfile(web_path,...
                        [tower '_LastFileDateTime.html']),'w');
                    fprintf(LastFileFID,'%s UTC on %s',...
                        datestr(TowerConvertDatafilenameDatenum(process_file{p}),...
                        'HH:MM'),...
                        datestr(TowerConvertDatafilenameDatenum(process_file{p}),...
                        'mmm dd, yyyy'));
                    fclose(LastFileFID);
                    
                    % last update time
                    [LastUpdateFID,LastFMsg] = fopen(fullfile(web_path,...
                        [tower '_LastUpdateDateTime.html']),'w');
                    fprintf(LastUpdateFID,'%s local time on %s',...
                        datestr(now,'HH:MM'),...
                        datestr(now,'mmmm dd, yyyy'));
                    fclose(LastUpdateFID);
                end
            catch
                warning('tower_main:CopyFigures',...
                    'Problem copying figures to %s.',log_path)
            end
        end
    catch
        [warnmsg, msgid] = lastwarn;
        fprintf(LogFID,'Warning: %s generated by %s.\n', warnmsg, msgid);
        fprintf(1,'Warning: %s generated by %s.\n', warnmsg, msgid);
        [errmsg, msgid] = lasterr;
        fprintf(LogFID,'Error: %s generated by %s.\n', errmsg, msgid);
        fprintf(1,'Error: %s generated by %s.\n', errmsg, msgid);
    end
end

%% get the QC codes if this was the first file of the day

if DO_MOVE | DEBUG
    %% ------
    % SUMMARY
    % -------
    all_data = TowerFind10minDataMATLAB('data_root',data_root,...
        'from_date',datevec(datenum(to_date)-1),...
        'to_date',to_date);
    
    %% ------------------
    % OUTPUT SUMMARY DATA
    % -------------------
    fprintf(LogFID,'Running on host %s.\n', hostname);
    
    %% -------
    % QC CODES
    % --------
    fileday = process_file{p}(1:5);
    fofile3 = fullfile(data_path,process_path{p},'summary_data',[fileday '_ChannelQCSummary.jpg']);
    fprintf(1,'Writing QC code summary image to file %s',fofile3);
    fprintf(LogFID,'Writing QC code summary image to file %s',fofile3);
    if isdeployed
        fQC = figure('Name','QC Data','Visible','off');
    else
        fQC = figure('Name','QC Data','Visible','on');
    end
    DisplayChannelQCSummary(all_data);
    % print
    try
        readyforprint([6 8],8,'k','w',0.5,fQC)
        set(legend,'Orientation','horizontal')
        set(findobj('tag','labels'),'BackgroundColor','none')
        print('-dpng',fofile3)
        close(fQC);
        if DO_MOVE
            % then files are being updated to put online
            try
                copyfile(fofile3,fullfile(log_path,[tower '_ChannelQCSummary.png']))
            end
            try
                copyfile(fofile3,fullfile(web_path,[tower '_ChannelQCSummary.png']))
            end
        end
    catch
        fprintf(1,'Error writing QC code summary image to file %s',fofile3);
        fprintf(LogFID,'Error writing QC code summary image to file %s',fofile3);
        warning('tower_main:CopyFigures',...
            'Problem copying QC figure to %s.',log_path)
    end
    
    %% -----------
    % SUMMARY DATA
    % ------------
    fprintf(1,'Writing summary data image to file %s.\n',fofile3);
    fprintf(LogFID,'Writing summary data image to file %s.\n',fofile3);
    if isdeployed
        fSUM = figure('Name','Summary Data','Visible','off');
    else
        fSUM = figure('Name','Summary Data','Visible','on');
    end
    a= DisplayChannelDataSummary(all_data,config_path,config_file,fSUM);
    for i = 1:numel(a)
        pre = get(a(i),'Position');
        set(a(i),'Position',[pre(1) pre(2)-0.1 pre(3) 0.14]);
    end
    % print
    try
        readyforprint([6 8],8,'k','w',0.5,fSUM)
        fofile4 = fullfile(data_path,process_path{p},'summary_data',...
            [fileday '_24hr_ChannelDataSummary.png']);
        print('-dpng',fofile4)
        close(fSUM);
        if DO_MOVE
            try
                copyfile(fofile4,fullfile(log_path,[tower '_ChannelDataSummary.png']))
            end
            try
                copyfile(fofile4,fullfile(web_path,[tower '_ChannelDataSummary.png']))
            end
        end
    catch
        fprintf(1,'Error writing summary data image to file %s.\n',fofile4);
        fprintf(LogFID,'Error writing summary data image to file %s.\n',fofile4);
        warning('tower_main:CopyFigures',...
            'Problem copying summary data figure to %s.',log_path)
    end
end

%% close the log file
fprintf(LogFID,'\n**********\n');
fprintf(LogFID,'Log file closed at %s local.\n',datestr(now,'HH:MM yyyy-mmmm-dd'));
fclose(LogFID);



